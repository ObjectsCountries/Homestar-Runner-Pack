<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>wawa.Schemas</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.Contracts.PureAttribute">
            <summary>Indicates that a type or method is pure, that is, it does not make any visible state changes.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" /> class
            with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets a value indicating whether the condition parameter value
            is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.op_Implicit(System.Boolean)~System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" /> by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)" />.
            </summary>
            <param name="parameterValue">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" />
            by passing the parameter <paramref name="parameterValue" /> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)" />.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" />,
            the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute" /> class
            with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition
            is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.op_Implicit(System.Boolean)~System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute" /> by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)" />.
            </summary>
            <param name="returnValue">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute" />
            by passing the parameter <paramref name="returnValue" /> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)" />.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" />,
            the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute" />
            class with the specified return value condition.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.op_Implicit(System.Boolean)~System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute" /> by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)" />.
            </summary>
            <param name="returnValue">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute" />
            by passing the parameter <paramref name="returnValue" /> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)" />.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute" /> class
            with the associated parameter name.
            </summary>
            <param name="parameterName">
            The associated parameter name.
            The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.op_Implicit(System.String)~System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute" /> by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)" />.
            </summary>
            <param name="parameterName">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute" />
            by passing the parameter <paramref name="parameterName" /> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)" />.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the
            listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" />
            class with a field or property member.
            </summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" /> class
            with the list of field and property members.
            </summary>
            <param name="members">
            The list of field and AttributeTargets.Property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or AttributeTargets.Property member names.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.op_Implicit(System.String)~System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" /> by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)" />.
            </summary>
            <param name="member">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" />
            by passing the parameter <paramref name="member" /> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)" />.
            </returns>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.op_Implicit(System.String[])~System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" /> by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])" />.
            </summary>
            <param name="members">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute" />
            by passing the parameter <paramref name="members" /> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])" />.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members
            have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute" /> class
            with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute" /> class
            with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets a value indicating whether the return value condition
            is <see langword="true" /> or <see langword="false" />.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>Specifies the syntax used in a string.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum" /> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid" /> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan" /> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute" /> class
            with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute" /> class
            with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Gets the optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.op_Implicit(System.String)~System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute" /> by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)" />.
            </summary>
            <param name="syntax">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute" />
            by passing the parameter <paramref name="syntax" /> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)" />.
            </returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>Used to indicate a byref escapes and is not scoped.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>Indicates that an API is experimental, and it may change in the future.</summary>
            <remarks><para>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </para></remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute" /> class, specifying the
            ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">
            The ID that the compiler will use when reporting a use of the API the attribute applies to.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks><para>
            The diagnostic ID is shown in build output for warnings and errors.
            This property represents the unique ID that can be used to suppress the warnings or errors, if needed.
            </para></remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation. The API accepts a format string
            instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks><para>
            An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.
            </para></remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.op_Implicit(System.String)~System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute" /> by using the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)" />.
            </summary>
            <param name="diagnosticId">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute" />
            by passing the parameter <paramref name="diagnosticId" /> to the constructor
            <see cref="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)" />.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterceptsLocationAttribute">
            <summary>Indicates that a location is intercepted by this method.</summary>
            <param name="filePath">The file path to the intercepted location.</param>
            <param name="line">The line number to the intercepted location.</param>
            <param name="character">The character number to the intercepted location.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterceptsLocationAttribute.#ctor(System.String,System.Int32,System.Int32)">
            <summary>Indicates that a location is intercepted by this method.</summary>
            <param name="filePath">The file path to the intercepted location.</param>
            <param name="line">The line number to the intercepted location.</param>
            <param name="character">The character number to the intercepted location.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.CollectionBuilderAttribute">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName" />
            method on the <paramref name="builderType" /> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks><para>
            <paramref name="methodName" /> must refer to a static method that accepts a single parameter of
            type <c>ReadOnlySpan&lt;T&gt;</c> and returns an instance of the collection being built containing
            a copy of the data from that span. In future releases of .NET, additional patterns may be supported.
            </para></remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName" />
            method on the <paramref name="builderType" /> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks><para>
            <paramref name="methodName" /> must refer to a static method that accepts a single parameter of
            type <c>ReadOnlySpan&lt;T&gt;</c> and returns an instance of the collection being built containing
            a copy of the data from that span. In future releases of .NET, additional patterns may be supported.
            </para></remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>Gets the type of the builder to use to construct the collection.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>Gets the name of the method on the builder to use to construct the collection.</summary>
            <remarks><para>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Indicates the type of the async method builder that should be used by a language compiler to
            build the attributed async method or to build the attributed type when used as the return type
            of an async method.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute" /> class.</summary>
            <param name="builderType">The <see cref="T:System.Type" /> of the associated builder.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
            <summary>Gets the <see cref="T:System.Type" /> of the associated builder.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.op_Implicit(System.Type)~System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute" /> by using the constructor
            <see cref="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)" />.
            </summary>
            <param name="builderType">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute" />
            by passing the parameter <paramref name="builderType" /> to the constructor
            <see cref="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)" />.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>Indicates the attributed type is to be used as an interpolated string handler.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute" /> class.
            </summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute" /> class.
            </summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>Gets the names of the arguments that should be passed to the handler.</summary>
            <remarks><para>
            The empty string may be used as the name of the receiver in an instance method.
            </para></remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.op_Implicit(System.String)~System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute" /> by using the constructor
            <see cref="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)" />.
            </summary>
            <param name="argument">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute" />
            by passing the parameter <paramref name="argument" /> to the constructor
            <see cref="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)" />.
            </returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.op_Implicit(System.String[])~System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute" /> by using the constructor
            <see cref="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])" />.
            </summary>
            <param name="arguments">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute" />
            by passing the parameter <paramref name="arguments" /> to the constructor
            <see cref="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])" />.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
            <summary>
            Used to indicate to the compiler that a method should be called in its containing module's initializer.
            </summary>
            <remarks><para>
            When one or more valid methods with this attribute are found in a compilation,
            the compiler will emit a module initializer that calls each of the attributed methods.<br />
            Certain requirements are imposed on any method targeted with this attribute:
            </para><list type="bullet">
            <item><description>The method must be <see langword="static" />.</description></item>
            <item><description>
            The method must be an ordinary member method, as opposed to a property accessor,
            constructor, local function, and so on.
            </description></item>
            <item><description>The method must be parameterless.</description></item>
            <item><description>The method must return <see langword="void" />.</description></item>
            <item><description>The method must not be generic or be contained in a generic type.</description></item>
            <item><description>
            The method's effective accessibility must be <see langword="internal" /> or <see langword="public" />.
            </description></item>
            </list><para>
            For more information, see the
            <a href="https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer">
            ECMA specification
            </a>.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
            <summary>
            Allows you to obtain the full path of the source file that contains the caller.
            This is the file path at the time of compile.
            </summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute" /> attribute to an optional parameter that has a default value.
            You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
            <summary>Allows you to obtain the line number in the source file at which the method is called.</summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" /> attribute to an optional parameter that
            has a default value. You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
            <summary>Allows you to obtain the method or property name of the caller to the method.</summary>
            <remarks><para>
            You apply the <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" /> attribute to an optional parameter that
            has a default value. You must specify an explicit default value for the optional parameter.
            You can't apply this attribute to parameters that aren't specified as optional.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>Indicates that a parameter captures the expression passed for another parameter as a string.</summary>
            <remarks><para>This attribute is implemented in the compiler for C# 10 and later versions only.</para></remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute" /> class.</summary>
            <param name="parameterName">
            The name of the parameter whose expression should be captured as a string.
            </param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>Gets the name of the parameter whose expression should be captured as a string.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.op_Implicit(System.String)~System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute" /> by using the constructor
            <see cref="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)" />.
            </summary>
            <param name="parameterName">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute" />
            by passing the parameter <paramref name="parameterName" /> to the constructor
            <see cref="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)" />.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
            <remarks><para>
            This attribute is unsafe because it may reveal uninitialized memory to the application in certain
            instances (e.g., reading from uninitialized stackalloc'd memory). If applied to a method directly,
            the attribute applies to that method and all nested functions (lambdas, local functions) below it.
            If applied to a type or module, it applies to all methods nested inside. This attribute is intentionally
            not permitted on assemblies. Use at the module level instead to apply to multiple type declarations.
            </para></remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute">
            <summary>
            Indicates that an API is in preview. This attribute allows call sites to be
            flagged with a diagnostic that indicates that a preview feature is used.
            Authors can use this attribute to ship preview features in their assemblies.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute" /> class.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute" /> class
            with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.Message">
            <summary>Gets the optional message associated with this attribute instance.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.Url">
            <summary>Gets or sets the optional URL associated with this attribute instance.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.op_Implicit(System.String)~System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute" /> by using the constructor
            <see cref="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor(System.String)" />.
            </summary>
            <param name="message">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute" />
            by passing the parameter <paramref name="message" /> to the constructor
            <see cref="M:System.Runtime.CompilerServices.RequiresPreviewFeaturesAttribute.#ctor(System.String)" />.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is
            required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName" /> used for the ref structs C# feature.</summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName" /> used for the required members C# feature.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute" /> class.</summary>
            <param name="featureName">The name of the compiler feature.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>Gets the name of the compiler feature.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            Gets or sets a value indicating whether the compiler can choose to allow access to the location
            where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName" />.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.op_Implicit(System.String)~System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute" /> by using the constructor
            <see cref="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)" />.
            </summary>
            <param name="featureName">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute" />
            by passing the parameter <paramref name="featureName" /> to the constructor
            <see cref="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)" />.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>Specifies that a type has required members or that a member is required.</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InlineArrayAttribute">
            <summary>Indicates that the instance's storage is sequentially replicated "length" times.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InlineArrayAttribute.#ctor(System.Int32)">
            <summary>Indicates that the instance's storage is sequentially replicated "length" times.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.InlineArrayAttribute.Length">
            <summary>Gets the length of the inlined array.</summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InlineArrayAttribute.op_Implicit(System.Int32)~System.Runtime.CompilerServices.InlineArrayAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:System.Runtime.CompilerServices.InlineArrayAttribute" /> by using the constructor
            <see cref="M:System.Runtime.CompilerServices.InlineArrayAttribute.#ctor(System.Int32)" />.
            </summary>
            <param name="length">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:System.Runtime.CompilerServices.InlineArrayAttribute" />
            by passing the parameter <paramref name="length" /> to the constructor
            <see cref="M:System.Runtime.CompilerServices.InlineArrayAttribute.#ctor(System.Int32)" />.
            </returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
            <param name="priority">
            The priority of the attributed member. Higher numbers are prioritized, lower
            numbers are deprioritized. 0 is the default if no attribute is present.
            </param>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
            <param name="priority">
            The priority of the attributed member. Higher numbers are prioritized, lower
            numbers are deprioritized. 0 is the default if no attribute is present.
            </param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>Gets the priority of the member.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.GeneratedRegexAttribute">
            <summary>
            Instructs the System.Text.RegularExpressions source generator to
            generate an implementation of the specified regular expression.
            </summary>
            <remarks>
            <para>
            The generator associated with this attribute only supports C#. It only supplies an implementation when applied
            to static, partial, parameterless, non-generic methods that are typed to return <see cref="T:System.Text.RegularExpressions.Regex" />.
            </para>
            <para>
            When the <see cref="T:System.Text.RegularExpressions.Regex" /> supports case-insensitive matches (either by passing
            <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" /> or using the inline <c>(?i)</c> switch in the pattern) the regex engines
            will use an internal casing table to transform the passed in pattern into an equivalent case-sensitive one.
            For example, given the pattern <c>abc</c>, the engines will transform it to the equivalent pattern
            <c>[Aa][Bb][Cc]</c>. The equivalences found in this internal casing table can change over time, for example in
            the case new characters are added to a new version of Unicode. When using the source generator, this
            transformation happens at compile time, which means the casing table used to find the equivalences will depend
            on the target framework at compile time. This differs from the rest of the <see cref="T:System.Text.RegularExpressions.Regex" /> engines, which
            perform this transformation at run-time, meaning they will always use casing table for the current runtime.
            </para></remarks>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute" /> class with the specified pattern.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute" />
            class with the specified pattern and options.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute" />
            class with the specified pattern and options.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="cultureName">
            The name of a culture to be used for case-sensitive comparisons.
            <paramref name="cultureName" /> is not case-sensitive.
            </param>
            <remarks><para>
            For a list of predefined culture names on Windows systems, see the Language tag column in the
            list of language/region names supported by
            <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c">
            Windows
            </a>.
            Culture names follow the standard defined by <a href="https://tools.ietf.org/html/bcp47">BCP 47</a>.
            In addition, starting with Windows 10, <paramref name="cultureName" /> can be any valid BCP-47 language tag.
            </para><para>
            If <paramref name="cultureName" /> is <see cref="F:System.String.Empty" />, the invariant culture will be used.
            </para></remarks>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute" />
            class with the specified pattern, options, and timeout.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="matchTimeoutMilliseconds">
            A time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite" />
            to indicate that the method should not time out.
            </param>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute" />
            class with the specified pattern, options, and timeout.
            </summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">
            A bitwise combination of the enumeration values that modify the regular expression.
            </param>
            <param name="matchTimeoutMilliseconds">
            A time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite" />
            to indicate that the method should not time out.</param>
            <param name="cultureName">
            The name of a culture to be used for case-sensitive comparisons.
            <paramref name="cultureName" /> is not case-sensitive.
            </param>
            <remarks><para>
            For a list of predefined culture names on Windows systems, see the Language tag column in the
            list of language/region names supported by
            <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c">
            Windows
            </a>.
            Culture names follow the standard defined by <a href="https://tools.ietf.org/html/bcp47">BCP 47</a>.
            In addition, starting with Windows 10, <paramref name="cultureName" /> can be any valid BCP-47 language tag.
            </para><para>
            If <paramref name="cultureName" /> is <see cref="F:System.String.Empty" />, the invariant culture will be used.
            </para></remarks>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.MatchTimeoutMilliseconds">
            <summary>
            Gets a time-out interval (milliseconds), or <see cref="F:System.Threading.Timeout.Infinite" />
            to indicate that the method should not time out.
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.CultureName">
            <summary>Gets the name of the culture to be used for case-sensitive comparisons.</summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.Pattern">
            <summary>Gets the regular expression pattern to match.</summary>
        </member>
        <member name="P:System.Text.RegularExpressions.GeneratedRegexAttribute.Options">
            <summary>Gets a bitwise combination of the enumeration values that modify the regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.GeneratedRegexAttribute.op_Implicit(System.String)~System.Text.RegularExpressions.GeneratedRegexAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute" /> by using the constructor
            <see cref="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String)" />.
            </summary>
            <param name="pattern">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:System.Text.RegularExpressions.GeneratedRegexAttribute" />
            by passing the parameter <paramref name="pattern" /> to the constructor
            <see cref="M:System.Text.RegularExpressions.GeneratedRegexAttribute.#ctor(System.String)" />.
            </returns>
        </member>
        <member name="T:Emik.MatchAttribute">
            <summary>Declares a contract that the generic parameter must include the qualified member.</summary>
        </member>
        <member name="M:Emik.MatchAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>Initializes a new instance of the <see cref="T:Emik.MatchAttribute" /> class.</summary>
            <param name="pattern">The regular expression pattern to match.</param>
            <param name="options">The bitwise combination of the enumeration values that modify the regular expression.</param>
        </member>
        <member name="P:Emik.MatchAttribute.Pattern">
            <summary>Gets the regular expression to match.</summary>
        </member>
        <member name="P:Emik.MatchAttribute.Options">
            <summary>Gets the bitwise combination of the enumeration values that modify the regular expression.</summary>
        </member>
        <member name="T:Emik.RegexDeconstructors">
            <summary>Declares a contract that the generic parameter must include the qualified member.</summary>
        </member>
        <member name="T:Emik.ChoiceAttribute">
            <summary>
            Indicates to Emik.SourceGenerators.Choices to extend the type, transforming it to a disjoint union.
            </summary>
        </member>
        <member name="T:Emik.ChoiceAttribute.Private">
            <summary>
            Indicates that the type is mutable, but only within the type.
            </summary>
        </member>
        <member name="T:Emik.ChoiceAttribute.Public">
            <summary>
            Indicates that the type is publicly mutable.
            </summary>
        </member>
        <member name="M:Emik.ChoiceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Emik.ChoiceAttribute" /> class.
            </summary>
        </member>
        <member name="M:Emik.ChoiceAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Emik.ChoiceAttribute" /> class.
            </summary>
            <param name="set">The type of fields that define the annotated union.</param>
        </member>
        <member name="M:Emik.ChoiceAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Emik.ChoiceAttribute" /> class.
            </summary>
            <param name="isPubliclyMutable">Determines if mutability is private or public.</param>
        </member>
        <member name="M:Emik.ChoiceAttribute.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Emik.ChoiceAttribute" /> class.
            </summary>
            <param name="set">The type of fields that define the annotated union.</param>
            <param name="isPubliclyMutable">Determines if mutability is private or public.</param>
        </member>
        <member name="M:Emik.ChoiceAttribute.#ctor(System.Boolean,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Emik.ChoiceAttribute" /> class.
            </summary>
            <param name="isPubliclyMutable">Determines if mutability is private or public.</param>
            <param name="set">The type of fields that define the annotated union.</param>
        </member>
        <member name="P:Emik.ChoiceAttribute.IsPubliclyMutable">
            <summary>
            When specified, determines whether the type is mutable publicly.
            </summary>
        </member>
        <member name="P:Emik.ChoiceAttribute.Set">
            <summary>
            When specified, gets the set of fields that define the annotated union.
            </summary>
        </member>
        <member name="T:Emik.Choice">
            <summary>
            Provides IntelliSense when a dot is typed after <c>Choice</c> and not <c>ChoiceAttribute</c>.
            </summary>
        </member>
        <member name="T:Emik.Choice.Private">
            <summary>
            Indicates that the type is mutable, but only within the type.
            </summary>
        </member>
        <member name="T:Emik.Choice.Public">
            <summary>
            Indicates that the type is publicly mutable.
            </summary>
        </member>
        <member name="T:Emik.NoImplicitOperatorAttribute">
            <summary>
            Prevents the analyzer from generating the implicit conversion into this constructor.
            </summary>
        </member>
        <member name="T:NullGuard.ValidationFlags">
            <summary>Used by <see cref="T:NullGuard.NullGuardAttribute" /> to target specific categories of members.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.None">
            <summary>Does nothing.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.Properties">
            <summary>
            Adds null guard checks to properties getter (cannot return null) and setter (cannot be set to null).
            </summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.Arguments">
            <summary>
            Method arguments are checked to make sure they are not null. This only
            applies to normal arguments, and the incoming value of a ref argument.
            </summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.AllPublicArguments">
            <summary>Processes all methods (arguments and return values) and properties.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.OutValues">
            <summary>Out and ref arguments of a method are checked for null just before the method returns.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.ReturnValues">
            <summary>Checks the return value of a method for null.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.Methods">
            <summary>Processes all arguments (normal, out and ref) and return values of methods.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.AllPublic">
            <summary>Checks everything (properties, all method args and return values).</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.NonPublic">
            <summary>Applies the other flags to all non-public members as well.</summary>
        </member>
        <member name="F:NullGuard.ValidationFlags.All">
            <summary>Wildcard.</summary>
        </member>
        <member name="T:NullGuard.AllowNullAttribute">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
        </member>
        <member name="T:NullGuard.NullGuardAttribute">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
            <param name="flags">
            The <see cref="T:NullGuard.ValidationFlags" /> to use for the target this attribute is being applied to.
            </param>
        </member>
        <member name="M:NullGuard.NullGuardAttribute.#ctor(NullGuard.ValidationFlags)">
            <summary>Prevents the injection of null checking (implicit mode only).</summary>
            <param name="flags">
            The <see cref="T:NullGuard.ValidationFlags" /> to use for the target this attribute is being applied to.
            </param>
        </member>
        <member name="M:NullGuard.NullGuardAttribute.op_Implicit(NullGuard.ValidationFlags)~NullGuard.NullGuardAttribute">
            <summary>
            Implicitly converts the parameter by creating the new instance of
            <see cref="T:NullGuard.NullGuardAttribute" /> by using the constructor
            <see cref="M:NullGuard.NullGuardAttribute.#ctor(NullGuard.ValidationFlags)" />.
            </summary>
            <param name="flags">The parameter to pass onto the constructor.</param>
            <returns>
            The new instance of <see cref="T:NullGuard.NullGuardAttribute" />
            by passing the parameter <paramref name="flags" /> to the constructor
            <see cref="M:NullGuard.NullGuardAttribute.#ctor(NullGuard.ValidationFlags)" />.
            </returns>
        </member>
        <member name="T:wawa.Schemas.Fluent.CanCreateSeparateListingOrBuild">
            <summary>Contains the method for registering a listing.<p /><c>[PublicAPI]</c></summary>
        </member>
        <member name="M:wawa.Schemas.Fluent.CanCreateSeparateListingOrBuild.CreateSeparateListing(System.String,System.String)">
            <summary>Creates a new listing in the <see cref="T:wawa.Schemas.TweaksEditorSettings" />.<p /><c>[MustUseReturnValue, NotNull, PublicAPI]</c></summary>
            <param name="name">The name of the new listing.<p /><c>[NotNull]</c></param>
            <param name="fileName">The file name of the new listing.<p /><c>[NotNull]</c></param>
            <returns>Itself.</returns>
        </member>
        <member name="M:wawa.Schemas.Fluent.CanCreateSeparateListingOrBuild.BuildAndClear">
            <summary>Clears the builder and returns the finalized <see cref="T:wawa.Schemas.TweaksEditorSettings" />.<p /><c>[NotNull, PublicAPI]</c></summary>
            <remarks><para>
            If you want to re-use it after this method is invoked, <see cref="M:wawa.Schemas.Fluent.CanCreateSeparateListingOrBuild.CreateSeparateListing(System.String,System.String)" /> needs
            to be first invoked before registering again with <see cref="M:wawa.Schemas.Fluent.CanRegister.Register``1" />.
            </para></remarks>
        </member>
        <member name="T:wawa.Schemas.Fluent.CanRegister">
            <summary>Contains the method for registering a type.</summary>
        </member>
        <member name="F:wawa.Schemas.Fluent.CanRegister.Message">
            <summary>The message to display when a developer uses the implicit methods created by classes.</summary>
        </member>
        <member name="M:wawa.Schemas.Fluent.CanRegister.Register``1">
            <summary>Adds the schema of <typeparamref name="T" /> to the <see cref="T:wawa.Schemas.TweaksEditorSettings" />.<p /><c>[MustUseReturnValue, NotNull, PublicAPI]</c></summary>
            <typeparam name="T">The type to register.</typeparam>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
            A member within <typeparamref name="T" /> has more than one <see cref="T:wawa.Schemas.TweaksSettingAttribute" /> annotated.
            </exception>
            <returns>Itself.</returns>
        </member>
        <member name="M:wawa.Schemas.Fluent.CanRegister.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:wawa.Schemas.Fluent.CanRegister.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:wawa.Schemas.Fluent.CanRegister.ToString">
            <inheritdoc />
        </member>
        <member name="M:wawa.Schemas.Fluent.CanRegister.GetType">
            <inheritdoc cref="M:System.Object.GetType" />
        </member>
        <member name="T:wawa.Schemas.Fluent.CanSection">
            <summary>Contains the method for registering a section.<p /><c>[PublicAPI]</c></summary>
        </member>
        <member name="M:wawa.Schemas.Fluent.CanSection.Section(System.String)">
            <summary>Creates a new section in the <see cref="T:wawa.Schemas.TweaksEditorSettings" />.<p /><c>[MustUseReturnValue, NotNull, PublicAPI]</c></summary>
            <param name="text">The text of the new section.<p /><c>[NotNull]</c></param>
            <returns>The <see cref="T:wawa.Schemas.TweaksEditorSettings" /> itself.</returns>
        </member>
        <member name="T:wawa.Schemas.Fluent.NamespaceDoc">
            <summary>Contains objects returned by the fluent builder APIs.</summary>
        </member>
        <member name="T:wawa.Schemas.AssemblyDoc">
            <summary>
            Provides a simple fluent builder API for building the <see cref="T:wawa.Schemas.TweaksEditorSettings" />
            schema object that Tweaks can use to format your mod settings.
            </summary>
        </member>
        <member name="T:wawa.Schemas.NamespaceDoc">
            <summary>Contains the core functionality of the library.</summary>
        </member>
        <member name="T:wawa.Schemas.TweaksEditorSettings">
            <summary>The class for holding the settings schema object used by tweaks for the mod settings.<p /><c>[PublicAPI]</c></summary>
        </member>
        <member name="T:wawa.Schemas.TweaksEditorSettings.Builder">
            <summary>The builder class for creating the settings schema object used by tweaks for the mod settings.</summary>
        </member>
        <member name="F:wawa.Schemas.TweaksEditorSettings.Builder.Suffix">
            <summary>The suffix for the default file name for mod settings.</summary>
        </member>
        <member name="M:wawa.Schemas.TweaksEditorSettings.Builder.BuildAndClear">
            <inheritdoc />
        </member>
        <member name="M:wawa.Schemas.TweaksEditorSettings.Builder.CreateSeparateListing(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:wawa.Schemas.TweaksEditorSettings.Builder.Section(System.String)">
            <inheritdoc />
        </member>
        <member name="M:wawa.Schemas.TweaksEditorSettings.Builder.Register``1">
            <inheritdoc />
        </member>
        <member name="M:wawa.Schemas.TweaksEditorSettings.Builder.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:wawa.Schemas.TweaksEditorSettings.Builder.Add(System.String,System.String)">
            <summary>Starts a new listing in the <see cref="T:wawa.Schemas.TweaksEditorSettings" />.</summary>
            <param name="name">The name of the new listing.</param>
            <param name="fileName">The file name of the new listing.</param>
            <returns></returns>
        </member>
        <member name="M:wawa.Schemas.TweaksEditorSettings.CreateListing(System.String,System.String)">
            <summary>Creates the new builder.<p /><c>[PublicAPI]</c></summary>
            <param name="name">The name of the initial listing.<p /><c>[NotNull]</c></param>
            <param name="modId">
            The mod id to get the file name from.
            If <see langword="null" />, implicitly gets the file name of the mod from the name of the assembly.
            <p /><c>[CanBeNull]</c></param>
            <returns>Itself.</returns>
        </member>
        <member name="M:wawa.Schemas.TweaksEditorSettings.System#Collections#Generic#IEnumerable{System#Collections#Generic#Dictionary{System#String,System#Object}}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:wawa.Schemas.TweaksEditorSettings.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:wawa.Schemas.TweaksSetting">
            <summary>Explicitly defines the type of listing to use for a setting.</summary>
        </member>
        <member name="F:wawa.Schemas.TweaksSetting.s_empty">
            <summary>The default <see cref="T:wawa.Schemas.TweaksSettingAttribute" />.</summary>
        </member>
        <member name="T:wawa.Schemas.TweaksSetting.ArrayAttribute">
            <summary>Indicates that the field or property is a setting serialized as an array.</summary>
            <param name="description">A longer description of the setting.</param>
            <param name="text">The short label describing the setting, defaulting to the field or property name.</param>
        </member>
        <member name="M:wawa.Schemas.TweaksSetting.ArrayAttribute.#ctor(System.String,System.String)">
            <summary>Indicates that the field or property is a setting serialized as an array.</summary>
            <param name="description">A longer description of the setting.<p /><c>[CanBeNull]</c></param>
            <param name="text">The short label describing the setting, defaulting to the field or property name.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="T:wawa.Schemas.TweaksSetting.CheckboxAttribute">
            <summary>Indicates that the field or property is a setting serialized as a boolean.</summary>
            <param name="description">A longer description of the setting.</param>
            <param name="text">The short label describing the setting, defaulting to the field or property name.</param>
        </member>
        <member name="M:wawa.Schemas.TweaksSetting.CheckboxAttribute.#ctor(System.String,System.String)">
            <summary>Indicates that the field or property is a setting serialized as a boolean.</summary>
            <param name="description">A longer description of the setting.<p /><c>[CanBeNull]</c></param>
            <param name="text">The short label describing the setting, defaulting to the field or property name.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="T:wawa.Schemas.TweaksSetting.DropdownAttribute">
            <summary>Indicates that the field or property is a setting serialized as one of a set of values.</summary>
            <param name="description">A longer description of the setting.</param>
            <param name="text">The short label describing the setting, defaulting to the field or property name.</param>
            <param name="dropdownItems">The set of possible values.</param>
        </member>
        <member name="M:wawa.Schemas.TweaksSetting.DropdownAttribute.#ctor(System.String,System.String,System.Object[])">
            <summary>Indicates that the field or property is a setting serialized as one of a set of values.</summary>
            <param name="description">A longer description of the setting.<p /><c>[CanBeNull]</c></param>
            <param name="text">The short label describing the setting, defaulting to the field or property name.<p /><c>[CanBeNull]</c></param>
            <param name="dropdownItems">The set of possible values.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="P:wawa.Schemas.TweaksSetting.DropdownAttribute.DropdownItems">
            <summary>Gets the set of possible values.<p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="T:wawa.Schemas.TweaksSetting.HiddenAttribute">
            <summary>Indicates that the field or property is a setting serialized as one of a set of values.</summary>
        </member>
        <member name="T:wawa.Schemas.TweaksSetting.NumberAttribute">
            <summary>Indicates that the field or property is a setting serialized as a number.</summary>
            <param name="description">A longer description of the setting.</param>
            <param name="text">The short label describing the setting, defaulting to the field or property name.</param>
        </member>
        <member name="M:wawa.Schemas.TweaksSetting.NumberAttribute.#ctor(System.String,System.String)">
            <summary>Indicates that the field or property is a setting serialized as a number.</summary>
            <param name="description">A longer description of the setting.<p /><c>[CanBeNull]</c></param>
            <param name="text">The short label describing the setting, defaulting to the field or property name.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="T:wawa.Schemas.TweaksSetting.StringAttribute">
            <summary>Indicates that the field or property is a setting serialized as a string.</summary>
            <param name="description">A longer description of the setting.</param>
            <param name="text">The short label describing the setting, defaulting to the field or property name.</param>
        </member>
        <member name="M:wawa.Schemas.TweaksSetting.StringAttribute.#ctor(System.String,System.String)">
            <summary>Indicates that the field or property is a setting serialized as a string.</summary>
            <param name="description">A longer description of the setting.<p /><c>[CanBeNull]</c></param>
            <param name="text">The short label describing the setting, defaulting to the field or property name.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="T:wawa.Schemas.TweaksSetting.SubmenuAttribute">
            <summary>Indicates that the field or property is a setting serialized as a submenu.</summary>
            <param name="description">A longer description of the setting.</param>
            <param name="text">The short label describing the setting, defaulting to the field or property name.</param>
        </member>
        <member name="M:wawa.Schemas.TweaksSetting.SubmenuAttribute.#ctor(System.String,System.String)">
            <summary>Indicates that the field or property is a setting serialized as a submenu.</summary>
            <param name="description">A longer description of the setting.<p /><c>[CanBeNull]</c></param>
            <param name="text">The short label describing the setting, defaulting to the field or property name.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="M:wawa.Schemas.TweaksSetting.From(System.Reflection.MemberInfo)">
            <summary>Gets the <see cref="T:wawa.Schemas.TweaksSettingAttribute" /> for the <paramref name="member" />.<p /><c>[CanBeNull]</c></summary>
            <param name="member"></param>
            <exception cref="T:System.Reflection.AmbiguousMatchException">
            The member provided has more than one <see cref="T:wawa.Schemas.TweaksSettingAttribute" /> annotated.
            </exception>
            <returns>
            The <see cref="T:wawa.Schemas.TweaksSettingAttribute" /> for the parameter <paramref name="member" />. If the <see cref="T:System.Reflection.MemberInfo" />
            has no <see cref="T:wawa.Schemas.TweaksSettingAttribute" /> annotations, then the default instance is returned. If the parameter
            <paramref name="member" /> is not a field or property, then <see langword="null" /> is returned instead.
            </returns>
        </member>
        <member name="T:wawa.Schemas.TweaksSettingAttribute">
            <summary>Indicates that the field or property is a setting for <see cref="T:wawa.Schemas.TweaksEditorSettings" />.</summary>
            <param name="description">A longer description of the setting.</param>
            <param name="text">The short label describing the setting, defaulting to the field or property name.</param>
        </member>
        <member name="M:wawa.Schemas.TweaksSettingAttribute.#ctor(System.String,System.String)">
            <summary>Indicates that the field or property is a setting for <see cref="T:wawa.Schemas.TweaksEditorSettings" />.</summary>
            <param name="description">A longer description of the setting.<p /><c>[CanBeNull]</c></param>
            <param name="text">The short label describing the setting, defaulting to the field or property name.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="F:wawa.Schemas.TweaksSettingAttribute.Key">
            <summary>The names of overriding keys.</summary>
        </member>
        <member name="F:wawa.Schemas.TweaksSettingAttribute.KeyProperty">
            <summary>The names of overriding keys.</summary>
        </member>
        <member name="F:wawa.Schemas.TweaksSettingAttribute.KeyType">
            <summary>The names of overriding keys.</summary>
        </member>
        <member name="P:wawa.Schemas.TweaksSettingAttribute.Description">
            <summary>Gets the longer description of the setting.<p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="P:wawa.Schemas.TweaksSettingAttribute.Text">
            <summary>Gets the short label describing the setting.<p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="M:wawa.Schemas.TweaksSettingAttribute.ToDictionary(System.Reflection.MemberInfo)">
            <summary>Converts the <see cref="T:wawa.Schemas.TweaksSettingAttribute" /> to the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
            <param name="member">The member to use to infer <see cref="F:wawa.Schemas.TweaksSettingAttribute.Key" /> and <see cref="P:wawa.Schemas.TweaksSettingAttribute.Text" />.</param>
            <returns>The dictionary for the <see cref="T:wawa.Schemas.TweaksEditorSettings" />.</returns>
        </member>
    </members>
</doc>
